# -*- coding: utf-8 -*-
"""Untitled51.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18OsAfGh_OE6wYENZOVuCuqrmRxwYjj1Q
"""

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.graph_objects as go
import pandas as pd

# --- 1. Load and Prepare Data ---
try:
    df = pd.read_csv('mineral_production_flourish_ready.csv')
except FileNotFoundError:
    print("Error: 'mineral_production_flourish_ready.csv' not found.")
    print("Please make sure the CSV file is in the same directory as this script.")
    exit()

# --- Data Cleaning and Preparation ---
df['Year'] = pd.to_numeric(df['Year'], errors='coerce').dropna().astype(int)
years = sorted(df['Year'].unique())
home_country = "India"
home_country_color = '#20c997'
unit = "(tonnes)"

# Get unique lists for dropdowns
prod_minerals = sorted(df['Production Mineral'].dropna().unique())
import_minerals = sorted(df['Import Mineral Name'].dropna().unique())
all_minerals = sorted(list(set(prod_minerals + import_minerals)))
all_minerals_with_total = ["--- All Minerals ---"] + all_minerals

known_cols = ['Country', 'Year', 'Production Mineral', 'Production Qty', 'Import Mineral Name', 'Import Qty']
indicator_cols = sorted([col for col in df.columns if df[col].dtype in ['int64', 'float64'] and col not in known_cols and col != 'Year'])

# --- 2. Initialize the Dash App ---
app = dash.Dash(__name__)
app.title = "Global Mineral Dashboard"

# --- 3. Define the App Layout ---
app.layout = html.Div(style={'fontFamily': 'Helvetica, Arial, sans-serif', 'color': '#333'}, children=[
    html.H1("Global Mineral & Economic Dashboard", style={'textAlign': 'center', 'margin': '20px'}),

    # --- Control Panel ---
    html.Div(style={'display': 'flex', 'justifyContent': 'space-around', 'padding': '20px', 'backgroundColor': '#f9f9f9', 'borderRadius': '8px'}, children=[
        html.Div(style={'flex': '1', 'padding': '0 10px'}, children=[
            html.Label('Select Mineral', style={'fontWeight': 'bold'}),
            dcc.Dropdown(
                id='mineral-dropdown',
                options=[{'label': m, 'value': m} for m in all_minerals_with_total],
                value='--- All Minerals ---'
            )
        ]),
        html.Div(style={'flex': '1', 'padding': '0 10px'}, children=[
            html.Label('Select Data Type', style={'fontWeight': 'bold'}),
            dcc.Dropdown(
                id='data-type-dropdown',
                options=[
                    {'label': 'Production', 'value': 'Production'},
                    {'label': 'Import', 'value': 'Import'},
                    {'label': 'Production & Import', 'value': 'Combined'}
                ],
                value='Combined'
            )
        ]),
        html.Div(style={'flex': '1', 'padding': '0 10px'}, children=[
            html.Label('Select Indicator', style={'fontWeight': 'bold'}),
            dcc.Dropdown(
                id='indicator-dropdown',
                options=[{'label': i, 'value': i} for i in indicator_cols],
                value=None,
                placeholder="View an economic indicator..."
            )
        ]),
    ]),

    # --- Map ---
    dcc.Graph(id='world-map', style={'height': '70vh'}),

    # --- Year Slider ---
    html.Div(style={'padding': '20px 40px'}, children=[
        html.Label('Select Year', style={'fontWeight': 'bold'}),
        dcc.Slider(
            id='year-slider',
            min=min(years),
            max=max(years),
            value=max(years),
            marks={str(year): str(year) for year in years if year % 2 == 0},
            step=None
        )
    ])
])

# --- 4. Define Callbacks for Interactivity ---
@app.callback(
    Output('world-map', 'figure'),
    [Input('year-slider', 'value'),
     Input('mineral-dropdown', 'value'),
     Input('data-type-dropdown', 'value'),
     Input('indicator-dropdown', 'value')]
)
def update_map(selected_year, selected_mineral, selected_data_type, selected_indicator):
    year_df = df[df['Year'] == selected_year].copy()
    fig = go.Figure()

    # --- Logic for Indicator View ---
    if selected_indicator and (selected_mineral is None or selected_mineral == '--- All Minerals ---'):
        map_data = year_df[['Country', selected_indicator]].dropna()
        z_data = map_data[selected_indicator]
        locations = map_data['Country']
        hover_template = f'<b>%{{location}}</b><br>{selected_indicator}: %{{z:,.2f}}<extra></extra>'
        colorbar_title = selected_indicator
        custom_data = None

    # --- Logic for Mineral View ---
    else:
        if selected_mineral == "--- All Minerals ---":
            prod_df = year_df.groupby('Country')['Production Qty'].sum().reset_index()
            import_df = year_df.groupby('Country')['Import Qty'].sum().reset_index()
        else:
            prod_df = year_df[df['Production Mineral'] == selected_mineral].groupby('Country')['Production Qty'].sum().reset_index()
            import_df = year_df[df['Import Mineral Name'] == selected_mineral].groupby('Country')['Import Qty'].sum().reset_index()

        merged_df = pd.merge(prod_df, import_df, on='Country', how='outer').fillna(0)
        merged_df['Production Qty'] = pd.to_numeric(merged_df['Production Qty'], errors='coerce').fillna(0)
        merged_df['Import Qty'] = pd.to_numeric(merged_df['Import Qty'], errors='coerce').fillna(0)

        if selected_data_type == 'Production':
            display_df = merged_df[merged_df['Production Qty'] > 0].copy()
            z_data, hover_template = display_df['Production Qty'], f'<b>%{{location}}</b><br>Production: %{{z:,.0f}} {unit}<extra></extra>'
            custom_data = None
        elif selected_data_type == 'Import':
            display_df = merged_df[merged_df['Import Qty'] > 0].copy()
            z_data, hover_template = display_df['Import Qty'], f'<b>%{{location}}</b><br>Import: %{{z:,.0f}} {unit}<extra></extra>'
            custom_data = None
        else: # Combined
            display_df = merged_df[(merged_df['Production Qty'] > 0) | (merged_df['Import Qty'] > 0)].copy()
            display_df['Combined'] = display_df['Production Qty'] + display_df['Import Qty']
            z_data = display_df['Combined']
            hover_template = f'<b>%{{location}}</b><br>Production: %{{customdata[0]:,.0f}}<br>Import: %{{customdata[1]:,.0f}}<extra></extra>'
            custom_data = display_df[['Production Qty', 'Import Qty']].values

        locations = display_df['Country']
        colorbar_title = f'Quantity {unit}'

    # --- Add Main Map Trace ---
    fig.add_trace(go.Choropleth(
        locations=locations,
        z=z_data,
        customdata=custom_data,
        locationmode="country names",
        colorscale="YlOrRd",
        showscale=True,
        colorbar_title=colorbar_title,
        hovertemplate=hover_template,
        name=''
    ))

    # --- Add Home Country Highlight ---
    if home_country in locations.values:
        fig.add_trace(go.Choropleth(
            locations=[home_country],
            z=[1],
            locationmode="country names",
            colorscale=[[0, home_country_color], [1, home_country_color]],
            showscale=False,
            hoverinfo='none' # No separate hover for highlight
        ))

    # --- Update Layout ---
    fig.update_layout(
        geo=dict(
            showframe=False,
            showcoastlines=False,
            projection_type='natural earth',
            bgcolor='rgba(240,240,240,255)',
            landcolor='rgba(217, 217, 217, 1)',
            subunitcolor='white'
        ),
        margin=dict(t=20, b=20, l=20, r=20)
    )

    return fig

# --- 5. Run the App ---
if __name__ == '__main__':
    app.run(debug=True)